name: Study Buddy CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: "gruppo-11"
  GCP_REGION: "europe-west1"
  GCP_SA_EMAIL: "github-terraform@gruppo-11.iam.gserviceaccount.com"
  WIF_PROVIDER: "projects/236113564589/locations/global/workloadIdentityPools/study-buddy-github-pool/providers/github-provider"
  TF_WORKING_DIR: "./terraform/k8s"
  APPROVERS: "ncridlig, aliloloee, taaraa99"

jobs:
  security-and-lint:
    name: Security and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

  terraform-plan:
    name: Terraform Plan
    needs: [security-and-lint]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    environment: terraform
    env:
      ACTIONS_RUNNER_DEBUG: true
      TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
      TF_VAR_machine_type: ${{ secrets.MACHINE_TYPE }}
      TF_VAR_environment: ${{ secrets.ENVIRONMENT }}
      TF_VAR_business_divsion: ${{ secrets.BUSINESS_DIVSION }}
      TF_VAR_name: ${{ secrets.NAME }}
      TF_VAR_user: ${{ secrets.USER }}
      TF_VAR_password: ${{ secrets.PASSWORD }}
      TF_VAR_db_version: ${{ secrets.DB_VERSION }}
      TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
      TF_VAR_debug: ${{ secrets.DEBUG }}
      TF_VAR_host: ${{ secrets.HOST }}
      TF_VAR_port: ${{ secrets.PORT }}
      TF_VAR_redis_host: ${{ secrets.REDIS_HOST }}
      TF_VAR_django_superuser_email: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
      TF_VAR_django_superuser_firstname: ${{ secrets.DJANGO_SUPERUSER_FIRSTNAME }}
      TF_VAR_django_superuser_lastname: ${{ secrets.DJANGO_SUPERUSER_LASTNAME }}
      TF_VAR_django_superuser_password: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
      TF_VAR_django_settings_module: ${{ secrets.DJANGO_SETTINGS_MODULE }}
      TF_VAR_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      TF_VAR_allowed_origins: ${{ secrets.ALLOWED_ORIGINS }}
      TF_VAR_llm_service_url: ${{ secrets.LLM_SERVICE_URL }}
      TF_VAR_csrf_trusted_origins: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
      TF_VAR_on_cloud: ${{ secrets.ON_CLOUD }}
      TF_VAR_gs_bucket_static_name: ${{ secrets.GS_BUCKET_STATIC_NAME }}
      TF_VAR_gs_bucket_media_name: ${{ secrets.GS_BUCKET_MEDIA_NAME }}
      TF_VAR_redis_host_llm: ${{ secrets.REDIS_HOST_LLM }}
      TF_VAR_backend_url: ${{ secrets.BACKEND_URL }}
      TF_VAR_async_job_max_retries: ${{ secrets.ASYNC_JOB_MAX_RETRIES }}
      TF_VAR_async_job_retry_delay: ${{ secrets.ASYNC_JOB_RETRY_DELAY }}
      TF_VAR_async_job_timeout: ${{ secrets.ASYNC_JOB_TIMEOUT }}
      TF_VAR_mark_leftover_result_key: ${{ secrets.MARK_LEFTOVER_RESULT_KEY }}
      TF_VAR_mark_dangling_result_key: ${{ secrets.MARK_DANGLING_RESULT_KEY }}
      TF_VAR_study_friend_cuda: ${{ secrets.STUDY_FRIEND_CUDA }}
      TF_VAR_next_public_api_url: ${{ secrets.NEXT_PUBLIC_API_URL }}
      
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan

  terraform-apply:
    name: Terraform Apply
    needs: [terraform-plan]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: terraform
    env:
      ACTIONS_RUNNER_DEBUG: true
      TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
      TF_VAR_machine_type: ${{ secrets.MACHINE_TYPE }}
      TF_VAR_environment: ${{ secrets.ENVIRONMENT }}
      TF_VAR_business_divsion: ${{ secrets.BUSINESS_DIVSION }}
      TF_VAR_name: ${{ secrets.NAME }}
      TF_VAR_user: ${{ secrets.USER }}
      TF_VAR_password: ${{ secrets.PASSWORD }}
      TF_VAR_db_version: ${{ secrets.DB_VERSION }}
      TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
      TF_VAR_debug: ${{ secrets.DEBUG }}
      TF_VAR_host: ${{ secrets.HOST }}
      TF_VAR_port: ${{ secrets.PORT }}
      TF_VAR_redis_host: ${{ secrets.REDIS_HOST }}
      TF_VAR_django_superuser_email: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
      TF_VAR_django_superuser_firstname: ${{ secrets.DJANGO_SUPERUSER_FIRSTNAME }}
      TF_VAR_django_superuser_lastname: ${{ secrets.DJANGO_SUPERUSER_LASTNAME }}
      TF_VAR_django_superuser_password: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
      TF_VAR_django_settings_module: ${{ secrets.DJANGO_SETTINGS_MODULE }}
      TF_VAR_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      TF_VAR_allowed_origins: ${{ secrets.ALLOWED_ORIGINS }}
      TF_VAR_llm_service_url: ${{ secrets.LLM_SERVICE_URL }}
      TF_VAR_csrf_trusted_origins: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
      TF_VAR_on_cloud: ${{ secrets.ON_CLOUD }}
      TF_VAR_gs_bucket_static_name: ${{ secrets.GS_BUCKET_STATIC_NAME }}
      TF_VAR_gs_bucket_media_name: ${{ secrets.GS_BUCKET_MEDIA_NAME }}
      TF_VAR_redis_host_llm: ${{ secrets.REDIS_HOST_LLM }}
      TF_VAR_backend_url: ${{ secrets.BACKEND_URL }}
      TF_VAR_async_job_max_retries: ${{ secrets.ASYNC_JOB_MAX_RETRIES }}
      TF_VAR_async_job_retry_delay: ${{ secrets.ASYNC_JOB_RETRY_DELAY }}
      TF_VAR_async_job_timeout: ${{ secrets.ASYNC_JOB_TIMEOUT }}
      TF_VAR_mark_leftover_result_key: ${{ secrets.MARK_LEFTOVER_RESULT_KEY }}
      TF_VAR_mark_dangling_result_key: ${{ secrets.MARK_DANGLING_RESULT_KEY }}
      TF_VAR_study_friend_cuda: ${{ secrets.STUDY_FRIEND_CUDA }}
      TF_VAR_next_public_api_url: ${{ secrets.NEXT_PUBLIC_API_URL }}
      
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:

      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ env.APPROVERS }}
          minimum-approvals: 1

      - name: Apply Terraform Configuration
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Clean up sensitive files
        if: always()
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Cleaning up terraform.tfvars and any leftovers..."
          rm -f terraform.tfvars
          rm -rf .terraform
