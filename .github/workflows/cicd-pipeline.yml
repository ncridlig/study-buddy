name: Study Buddy CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: "gruppo-11"
  GCP_REGION: "europe-west1"
  GCP_SA_EMAIL: "github-terraform@gruppo-11.iam.gserviceaccount.com"
  WIF_PROVIDER: "projects/236113564589/locations/global/workloadIdentityPools/study-buddy-github-pool/providers/github-provider"
  TF_WORKING_DIR: "./terraform/k8s"
  APPROVERS: "ncridlig, aliloloee, taaraa99"

jobs:
  security-and-lint:
    name: Security and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

  terraform-apply:
    name: Terraform Plan & Apply
    needs: [security-and-lint]
    runs-on: ubuntu-latest
    timeout-minutes: 29
    environment: terraform
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Echo GCP Region
        run: echo "GCP Region is ${{ secrets.GCP_REGION }}"

      - name: Create terraform.tfvars file
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          cat > terraform.tfvars <<EOF
          gcp_project_id = "${{ secrets.GCP_PROJECT_ID }}"
          gcp_region = "${{ secrets.GCP_REGION }}"
          machine_type = "${{ secrets.MACHINE_TYPE }}"
          environment = "${{ secrets.ENVIRONMENT }}"
          business_divsion = "${{ secrets.BUSINESS_DIVSION }}"
          NAME = "${{ secrets.NAME }}"
          USER = "${{ secrets.USER }}"
          PASSWORD = "${{ secrets.PASSWORD }}"
          DB_VERSION = "${{ secrets.DB_VERSION }}"
          SECRET_KEY = "${{ secrets.SECRET_KEY }}"
          DEBUG = "${{ secrets.DEBUG }}"
          HOST = "${{ secrets.HOST }}"
          PORT = "${{ secrets.PORT }}"
          REDIS_HOST = "${{ secrets.REDIS_HOST }}"
          DJANGO_SUPERUSER_EMAIL = "${{ secrets.DJANGO_SUPERUSER_EMAIL }}"
          DJANGO_SUPERUSER_FIRSTNAME = "${{ secrets.DJANGO_SUPERUSER_FIRSTNAME }}"
          DJANGO_SUPERUSER_LASTNAME = "${{ secrets.DJANGO_SUPERUSER_LASTNAME }}"
          DJANGO_SUPERUSER_PASSWORD = "${{ secrets.DJANGO_SUPERUSER_PASSWORD }}"
          DJANGO_SETTINGS_MODULE = "${{ secrets.DJANGO_SETTINGS_MODULE }}"
          ALLOWED_HOSTS = "${{ secrets.ALLOWED_HOSTS }}"
          ALLOWED_ORIGINS = "${{ secrets.ALLOWED_ORIGINS }}"
          LLM_SERVICE_URL = "${{ secrets.LLM_SERVICE_URL }}"
          CSRF_TRUSTED_ORIGINS = "${{ secrets.CSRF_TRUSTED_ORIGINS }}"
          ON_CLOUD = "${{ secrets.ON_CLOUD }}"
          GS_BUCKET_STATIC_NAME = "${{ secrets.GS_BUCKET_STATIC_NAME }}"
          GS_BUCKET_MEDIA_NAME = "${{ secrets.GS_BUCKET_MEDIA_NAME }}"
          REDIS_HOST_LLM = "${{ secrets.REDIS_HOST_LLM }}"
          BACKEND_URL = "${{ secrets.BACKEND_URL }}"
          ASYNC_JOB_MAX_RETRIES = "${{ secrets.ASYNC_JOB_MAX_RETRIES }}"
          ASYNC_JOB_RETRY_DELAY = "${{ secrets.ASYNC_JOB_RETRY_DELAY }}"
          ASYNC_JOB_TIMEOUT = "${{ secrets.ASYNC_JOB_TIMEOUT }}"
          MARK_LEFTOVER_RESULT_KEY = "${{ secrets.MARK_LEFTOVER_RESULT_KEY }}"
          MARK_DANGLING_RESULT_KEY = "${{ secrets.MARK_DANGLING_RESULT_KEY }}"
          STUDY_FRIEND_CUDA = "${{ secrets.STUDY_FRIEND_CUDA }}"
          NEXT_PUBLIC_API_URL = "${{ secrets.NEXT_PUBLIC_API_URL }}"
          EOF

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -var-file=terraform.tfvars

      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ env.APPROVERS }}
          minimum-approvals: 1

      - name: Apply Terraform Configuration
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Clean up sensitive files
        if: always()
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Cleaning up terraform.tfvars and any leftovers..."
          rm -f terraform.tfvars
          rm -rf .terraform
