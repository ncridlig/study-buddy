name: Study Buddy CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: "gruppo-11"
  GCP_REGION: "europe-west1"
  GCP_SA_EMAIL: "github-terraform@gruppo-11.iam.gserviceaccount.com"
  WIF_PROVIDER: "projects/236113564589/locations/global/workloadIdentityPools/study-buddy-github-pool/providers/github-provider"
  TF_WORKING_DIR: "./terraform/k8s"
  APPROVERS: "ncridlig, aliloloee, taaraa99"

jobs:
  security-and-lint:
    name: Security and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

  terraform-apply:
    name: Terraform Plan & Apply
    needs: [security-and-lint]
    runs-on: ubuntu-latest
    timeout-minutes: 29
    environment: terraform
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      # New, secure step to create the tfvars file
      - name: Create terraform.tfvars from secret
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # First, check that the secret is not empty
          if [ -z "${{ secrets.TF_VARS_CONTENT }}" ]; then
            echo "Error: TF_VARS_CONTENT secret is not set or is empty in the 'terraform' environment."
            exit 1
          fi
          # Now, securely write the content to a file, preventing it from being logged
          echo "${{ secrets.TF_VARS_CONTENT }}" | sudo tee terraform.tfvars > /dev/null
          echo "terraform.tfvars file created successfully."

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      # Terraform now automatically finds and uses terraform.tfvars
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan

      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ env.APPROVERS }}
          minimum-approvals: 1

      # Apply the exact plan that was approved
      - name: Apply Terraform Configuration
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Clean up sensitive files
        if: always()
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Cleaning up sensitive files..."
          rm -f terraform.tfvars tfplan
          rm -rf .terraform
