name: Study Buddy CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# This env block is personalized for your project.
env:
  GCP_PROJECT_ID: "gruppo-11"
  GCP_REGION: "europe-west1" # Using the region you chose for the bucket
  GCP_SA_EMAIL: "github-terraform@gruppo-11.iam.gserviceaccount.com"
  WIF_PROVIDER: "projects/236113564589/locations/global/workloadIdentityPools/study-buddy-github-pool/providers/github-provider"
  TF_WORKING_DIR: "./terraform/environments/production"
  ARTIFACT_REPO: "study-buddy-repo"

jobs:
  # This job lints and scans the terraform code for security issues.
  security-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Security Scan (tfsec)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.TF_WORKING_DIR }}

  # This job builds and deploys the FRONTEND.
  # It only runs on a push to the main branch IF files in the frontend/ directory have changed.
  build-and-deploy-frontend:
    needs: [security-and-lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    paths:
      - 'frontend/**'
      - '.github/workflows/cicd-pipeline.yml'

    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Frontend Image
        id: build-push
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/frontend:$IMAGE_TAG"
          docker build -t $IMAGE_URL ./frontend
          docker push $IMAGE_URL
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Scan Frontend Container Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-push.outputs.image_url }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Deploy Frontend with Terraform
        run: |
          terraform init
          terraform apply -auto-approve -var="frontend_image_tag=${{ github.sha }}" -target=google_cloud_run_v2_service.frontend -target=google_cloud_run_v2_service_iam_binding.frontend_public_access
        working-directory: ${{ env.TF_WORKING_DIR }}

  # This job builds and deploys the BACKEND.
  build-and-deploy-backend:
    needs: [security-and-lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    paths:
      - 'backend/**'
      - '.github/workflows/cicd-pipeline.yml'
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Backend Image
        id: build-push
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/backend:$IMAGE_TAG"
          docker build -t $IMAGE_URL ./backend
          docker push $IMAGE_URL
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Scan Backend Container Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-push.outputs.image_url }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Deploy Backend with Terraform
        run: |
          terraform init
          terraform apply -auto-approve -var="backend_image_tag=${{ github.sha }}" -target=google_cloud_run_v2_service.backend
        working-directory: ${{ env.TF_WORKING_DIR }}

  # This job builds and deploys the LLM-SERVICE.
  build-and-deploy-llm-service:
    needs: [security-and-lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    paths:
      - 'llm-service/**'
      - '.github/workflows/cicd-pipeline.yml'
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push LLM Service Image
        id: build-push
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/llm-service:$IMAGE_TAG"
          docker build -t $IMAGE_URL ./llm-service
          docker push $IMAGE_URL
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Scan LLM Service Container Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-push.outputs.image_url }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Deploy LLM Service with Terraform
        run: |
          terraform init
          terraform apply -auto-approve -var="llm_service_image_tag=${{ github.sha }}" -target=google_cloud_run_v2_service.llm_service
        working-directory: ${{ env.TF_WORKING_DIR }}